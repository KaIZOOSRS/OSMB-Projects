package com.osmb.script.wintertodtopener;

import com.osmb.api.location.position.types.WorldPosition;
import com.osmb.api.scene.RSObject;
import com.osmb.api.script.Script;
import com.osmb.api.script.ScriptDefinition;
import com.osmb.api.script.SkillCategory;
import com.osmb.api.ui.chatbox.dialogue.DialogueType;
import com.osmb.api.utils.UIResult;
import com.osmb.api.utils.timing.Timer;

import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Predicate;


@ScriptDefinition(name = "Wintertodt opener", description = "", author = "Kaizo", skillCategory = SkillCategory.FIREMAKING, version = 1.0)
public class WintertodtLooter extends Script {


    public static final String[] BANK_NAMES = {"Bank chest"};
    public static final String[] BANK_ACTIONS = {"bank", "open"};
    private static final Set<Integer> IGNORE_NOTHING = Collections.emptySet();
    private boolean bank = false;

    public WintertodtLooter(Object scriptCore) {
        super(scriptCore);
    }



    @Override
    public int[] regionsToPrioritise() {
        return new int[]{6461};
    }



    @Override
    public int poll() {
        if (getWidgetManager().getBank().isVisible()) {
            handleBankInterface();
            return 0;
        }

        Optional<Integer> freeSlots = getItemManager().getFreeSlotsInteger(getWidgetManager().getInventory());
        if(!freeSlots.isPresent()) {
            // for some reason we couldn't open the inventory, to be safe lets re-poll.
            return 0;
        }

        if (freeSlots.get() == 0) {
            // if no free slots to co
            openBank();
            return 0;
        }

        // find reward cart + log
        RSObject rewardCart = getObjectManager().getClosestObject("Reward Cart");
        if (rewardCart == null) {
            log(getClass().getSimpleName(), "Can't find Reward Cart...");
            return 0;
        }

        if (!rewardCart.interact("Big-search")) {
            log(getClass().getSimpleName(), "Failed to interact with Reward Cart using 'Big-search'.");
            // return back to the top of the script executor
            return 0;
        }

        log(getClass().getSimpleName(), "Successfully interacted with Reward Cart.");

        // wait until finished collecting
        // we use human task, which on completion generates a human delay.
        // if we don't do this, the bot will INSTANTLY interact as the task returns true (inventory being full)
        submitHumanTask(() -> {

            DialogueType dialogueType = getWidgetManager().getDialogue().getDialogueType();
            if(dialogueType == DialogueType.TAP_HERE_TO_CONTINUE) {
                // check if correct dialogue
                UIResult<String> dialogueTextResult = getWidgetManager().getDialogue().getText();
                if(dialogueTextResult.isFound()) {
                    String dialogueText = dialogueTextResult.get();
                    if(dialogueText.startsWith("There are no rewards")|| dialogueText.startsWith("You think")) {
                        // no rewards dialogue, stop script
                        stop();
                        return true;
                    }
                }
            }
            if (dialogueType != null) {
                return true;
            }


            Optional<Integer> freeSlots_ = getItemManager().getFreeSlotsInteger(getWidgetManager().getInventory());
            if (!freeSlots_.isPresent()) {
                // if the returned Optional object is empty, it means that the inventory not visible
                return false;
            }
            if (freeSlots_.get() == 0) {
                // no free slots, so the inventory is full
                // return true to break out of the task
                return true;
            }
            // inventory is not full, so return false and poll the task again
            return false;
        }, random(TimeUnit.SECONDS.toMillis(60), TimeUnit.SECONDS.toMillis(90)));
        return 1000;
    }

    private void openBank() {
        log(getClass().getSimpleName(), "Searching for a bank...");
        // Find bank and open it
        Predicate<RSObject> bankQuery = gameObject -> {
            // if object has no name
            if (gameObject.getName() == null) {
                return false;
            }
            // has no interact options (eg. bank, open etc.)
            if (gameObject.getActions() == null) {
                return false;
            }

            if (!Arrays.stream(BANK_NAMES).anyMatch(name -> name.equalsIgnoreCase(gameObject.getName()))) {
                return false;
            }

            // if no actions contain bank or open
            if (!Arrays.stream(gameObject.getActions()).anyMatch(action -> Arrays.stream(BANK_ACTIONS).anyMatch(bankAction -> bankAction.equalsIgnoreCase(action)))) {
                return false;
            }
            // final check is if the object is reachable
            return gameObject.canReach();
        };
        List<RSObject> banksFound = getObjectManager().getObjects(bankQuery);
        //can't find a bank
        if (banksFound.isEmpty()) {
            log(getClass().getSimpleName(), "Can't find any banks matching criteria...");
            return;
        }
        RSObject object = (RSObject) getUtils().getClosest(banksFound);
        if (!object.interact(BANK_ACTIONS))
            return;
        AtomicReference<Timer> positionChangeTimer = new AtomicReference<>(new Timer());
        AtomicReference<WorldPosition> pos = new AtomicReference<>(null);
        // wait for bank interface
        submitHumanTask(() -> {
            WorldPosition position = getWorldPosition();
            if (position == null) {
                return false;
            }
            // check position change, in case of a dud action
            if (pos.get() == null || !position.equals(pos.get())) {
                positionChangeTimer.get().reset();
                pos.set(position);
            }

            return getWidgetManager().getBank().isVisible() || positionChangeTimer.get().timeElapsed() > 2000;
        }, 15000);
        return;
    }





    private void handleBankInterface() {
            if (!getWidgetManager().getBank().depositAll(IGNORE_NOTHING)) {
            log(getClass().getSimpleName(), "Failed to deposit while bank is open.");
            return;
        }
        log(getClass().getSimpleName(), "Deposited inventory while bank is open.");
        getWidgetManager().getBank().close();
    }
}
